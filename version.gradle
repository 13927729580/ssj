def version = "N/A",versionMajor = "0",versionMinor = "0",versionPatch = "0",versionBuild = "0"
def fullVersionTag = "",shaGit = "",dirty = null
def longVersionName = null

// Fetch the version according to git latest tag and "how far are we from last tag"
try {
    longVersionName = "gitz -C . describe --tags --long --dirty".execute().text.trim()
    (fullVersionTag, versionBuild, shaGit, dirty) = longVersionName.tokenize('-')
    (versionMajor, versionMinor, versionPatch) = fullVersionTag.tokenize('.')

    if (versionMajor.charAt(0) == 'v')
        versionMajor = versionMajor.substring(1)
    version = "$versionMajor.$versionMinor"

    if (versionBuild != "0")
        version = "$version.$versionPatch.$versionBuild"
    else if (versionPatch != "0")
        version = "$version.$versionPatch"
}
catch(Exception e1) {
    printf("> Error getting versioning info from git: " + e1.getMessage())
}

ext.getVerName = { ->

    if (dirty != null) //otherwise lesser will always be dirty
        version = "$version-dirty"

    return version
}

ext.getVerCode = { ->

    // Turn the version name into a version code
    return versionMajor.toInteger() * 100000 +
            versionMinor.toInteger() * 10000 +
            versionPatch.toInteger() * 1000 +
            versionBuild.toInteger()
}
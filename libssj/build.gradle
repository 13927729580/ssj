/*
 * build.gradle
 * Copyright (c) 2016
 * Authors: Ionut Damian, Michael Dietz, Frank Gaibler, Daniel Langerenken, Simon Flutura
 * *****************************************************
 * This file is part of the Social Signal Interpretation for Java (SSJ) framework
 * developed at the Lab for Human Centered Multimedia of the University of Augsburg.
 *
 * SSJ has been inspired by the SSI (http://openssi.net) framework. SSJ is not a
 * one-to-one port of SSI to Java, it is an approximation. Nor does SSJ pretend
 * to offer SSI's comprehensive functionality and performance (this is java after all).
 * Nevertheless, SSJ borrows a lot of programming patterns from SSI.
 *
 * This library is free software; you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 3 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this library; if not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.library'

//this will compile the library to correspond to the LGPL standard by excluding GPL dependencies from the project
def lesser = false

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'
    publishNonDefault true

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 21

        // Fetch the version according to git latest tag and "how far are we from last tag"
        def longVersionName = "git -C \"${rootDir}\" describe --tags --long --dirty".execute().text.trim()
        def (fullVersionTag, versionBuild, shaGit, dirty) = longVersionName.tokenize('-')
        def(versionMajor, versionMinor, versionPatch) = fullVersionTag.tokenize('.')

        if(versionMajor.charAt(0) == 'v')
            versionMajor = versionMajor.substring(1)
        def version = "$versionMajor.$versionMinor"

        if(versionBuild != "0")
            version = "$version.$versionPatch.$versionBuild"
        else if(versionPatch != "0")
            version = "$version.$versionPatch"

        if (lesser)
            version = "$version" + "L"
        else if (dirty != null) //otherwise lesser will always be dirty
            version = "$version-dirty"

        versionName version

        // Turn the version name into a version code
        versionCode versionMajor.toInteger() * 100000 +
                versionMinor.toInteger() * 10000 +
                versionPatch.toInteger() * 1000 +
                versionBuild.toInteger()

        printf("\n--------" + "VERSION DATA--------" + "\n" + "- CODE: " + versionCode + "\n" +
                "- NAME: " + versionName + "\n----------------------------\n")
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
    }

    if(lesser) {
        sourceSets {
            main {
                java {
                    srcDir 'src'
                    exclude '**/praat/**', '**/SpeechRate.java', '**/Energy.java', '**/Pitch.java'
                    exclude '**/graphic/**'
                    exclude '**/AudioTest.java', '**/testEvent.java'
                }
            }
        }
    }
}

dependencies {

    if(lesser) {
        compile fileTree(dir: 'libs', include: ['*.jar'], excludes: ['TarsosDSP-Android-2.1.jar', 'GraphView-4.0.1.j1.jar'])
    }
    else {
        compile fileTree(dir: 'libs', include: ['*.jar'])
    }
}

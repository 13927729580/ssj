/*
 * build.gradle
 * Copyright (c) 2017
 * Authors: Ionut Damian, Michael Dietz, Frank Gaibler, Daniel Langerenken, Simon Flutura,
 * Vitalijs Krumins, Antonio Grieco
 * *****************************************************
 * This file is part of the Social Signal Interpretation for Java (SSJ) framework
 * developed at the Lab for Human Centered Multimedia of the University of Augsburg.
 *
 * SSJ has been inspired by the SSI (http://openssi.net) framework. SSJ is not a
 * one-to-one port of SSI to Java, it is an approximation. Nor does SSJ pretend
 * to offer SSI's comprehensive functionality and performance (this is java after all).
 * Nevertheless, SSJ borrows a lot of programming patterns from SSI.
 *
 * This library is free software; you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 3 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this library; if not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.library'
apply from: '../version.gradle'

//this will include the mobile SSI classes in the library
def mobileSSI = false

ext {
    bintrayRepo = 'maven'
    bintrayName = 'ssj'

    publishedGroupId = 'com.github.hcmlab'
    libraryName = 'ssj'
    artifact = 'libssj'

    libraryDescription = 'Social Signal Processing for Android'

    siteUrl = 'https://github.com/hcmlab/ssj'
    gitUrl = 'https://github.com/hcmlab/ssj.git'

    libraryVersion = getVerName()

    developerId = 'hcmlab'
    developerName = 'Human Centered Multimedia'
    developerEmail = 'ssj@hcm-lab.de'

    licenseName = 'GNU GENERAL PUBLIC LICENSE, Version 3'
    licenseUrl = 'http://www.gnu.org/licenses/gpl.txt'
    allLicenses = ["GPL-3.0"]
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        versionName getVerName()
        versionCode getVerCode()

        printf("\n--------" + "VERSION DATA--------" + "\n" + "- CODE: " + versionCode + "\n" +
                "- NAME: " + versionName + "\n----------------------------\n")
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    sourceSets {
        main {
            java {
                if (!mobileSSI) {
                    exclude '**/MobileSSIConsumer.java'
                }
            }
        }
        androidTest {
            java {
                if (!mobileSSI) {
                    exclude '**/MobileSSITest.java'
                }
            }
        }
    }
}

// set permissions for unit tests
def adb = android.getAdbExe().toString()
def recipient = "hcm.ssj.test"

def grantPermissionsTask = tasks.create("grant permissions") << {
    printf("grant permissions for unit tests\n")
    "${adb} shell pm grant ${recipient} android.permission.RECORD_AUDIO".execute()
    "${adb} shell pm grant ${recipient} android.permission.WRITE_EXTERNAL_STORAGE".execute()
    "${adb} shell pm grant ${recipient} android.permission.READ_EXTERNAL_STORAGE".execute()
    "${adb} shell pm grant ${recipient} android.permission.CAMERA".execute()
    "${adb} shell pm grant ${recipient} android.permission.INTERNET".execute()
    "${adb} shell pm grant ${recipient} android.permission.WAKE_LOCK".execute()
    "${adb} shell pm grant ${recipient} android.permission.ACCESS_FINE_LOCATION".execute()
    "${adb} shell pm grant ${recipient} android.permission.ACCESS_COARSE_LOCATION".execute()
    "${adb} shell pm grant ${recipient} android.permission.BODY_SENSORS".execute()
    "${adb} shell pm grant ${recipient} android.permission.BLUETOOTH".execute()
    "${adb} shell pm grant ${recipient} android.permission.BLUETOOTH_ADMIN".execute()
    "${adb} shell pm grant ${recipient} com.microsoft.band.service.access.BIND_BAND_SERVICE".execute()
    "${adb} shell pm grant ${recipient} android.permission.ACCESS_WIFI_STATE".execute()
}
grantPermissionsTask.description = "Grants permissions for Marshmallow"

tasks.whenTaskAdded { theTask ->
    def assemblePattern = ~"assembleDebugAndroidTest"
    if (assemblePattern.matcher(theTask.name).matches()) {
        theTask.dependsOn grantPermissionsTask.name
    }
}

dependencies {
    androidTestCompile 'com.android.support:support-annotations:25.3.1'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'

    compile fileTree(dir: 'libs', include: ['*.jar'])
}

//upload to library bintray
apply from: '../installv1.gradle'
apply from: '../bintrayv1.gradle'